{"version":3,"sources":["logo.svg","MovieInfo.js","OMDBQueryForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieInfo","this","props","movie","Title","Year","src","Poster","alt","Genre","Plot","React","Component","OMDBQueryForm","state","baseURL","apikey","query","movieTitle","searchURL","handleSubmit","bind","handleChange","event","setState","target","id","value","preventDefault","a","fetch","response","json","result","console","log","Fragment","onSubmit","for","type","onChange","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,sLCgB5BC,E,uKAZT,OACE,6BACE,sCAAYC,KAAKC,MAAMC,MAAMC,OAC7B,qCAAWH,KAAKC,MAAMC,MAAME,MAC5B,yBAAKC,IAAKL,KAAKC,MAAMC,MAAMI,OAAQC,IAAKP,KAAKC,MAAMC,MAAMC,QACzD,sCAAYH,KAAKC,MAAMC,MAAMM,OAC7B,qCAAWR,KAAKC,MAAMC,MAAMO,W,GARdC,IAAMC,WCkEfC,E,kDAhEX,WAAaX,GAAQ,IAAD,8BAClB,cAAMA,IACDY,MAAQ,CACXC,QAAS,2BACTC,OAAQ,kBACRC,MAAO,MACPC,WAAY,GACZC,UAAW,GACXhB,MAAO,IAET,EAAKiB,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAXF,E,yDAaNE,GACZtB,KAAKuB,SAAL,eAAiBD,EAAME,OAAOC,GAAKH,EAAME,OAAOE,U,mCAEpCJ,GAAQ,IAAD,OACnBA,EAAMK,iBACN3B,KAAKuB,SAAS,CACZL,UAAWlB,KAAKa,MAAMC,QAAUd,KAAKa,MAAME,OAASf,KAAKa,MAAMG,MAAQhB,KAAKa,MAAMI,YADpF,sBAEG,8BAAAW,EAAA,+EAEwBC,MAAM,EAAKhB,MAAMK,WAFzC,cAEOY,EAFP,gBAGsBA,EAASC,OAH/B,OAGOC,EAHP,OAIC,EAAKT,SAAS,CAACrB,MAAO8B,IAJvB,kDAMCC,QAAQC,IAAR,MAND,6D,+BAoBH,OACE,kBAAC,IAAMC,SAAP,KACE,0BAAMC,SAAUpC,KAAKmB,cACnB,2BAAOkB,IAAI,cAAX,SACA,2BACEZ,GAAG,aACHa,KAAK,OACLZ,MAAO1B,KAAKa,MAAMI,WAClBsB,SAAUvC,KAAKqB,eAEjB,2BACEiB,KAAK,SACLZ,MAAM,qBAGR1B,KAAKa,MAAMX,MACT,kBAAC,EAAD,CAAWA,MAAOF,KAAKa,MAAMX,QAC7B,Q,GA1DcQ,IAAMC,WCanB6B,MAXf,WACE,OAEE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.c636960b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nclass MovieInfo extends React.Component {\n    render () {\n      return (\n        <div>\n          <h1>Title: {this.props.movie.Title}</h1>\n          <h2>Year: {this.props.movie.Year}</h2>\n          <img src={this.props.movie.Poster} alt={this.props.movie.Title} />\n          <h3>Genre: {this.props.movie.Genre}</h3>\n          <h4>Plot: {this.props.movie.Plot}</h4>\n        </div>\n      )\n    }\n  }\n\nexport default MovieInfo\n","import React, { Component } from 'react'\nimport MovieInfo from './MovieInfo'\n\nclass OMDBQueryForm extends React.Component {\n    constructor (props) {\n      super(props)\n      this.state = {\n        baseURL: 'http://www.omdbapi.com/?',\n        apikey: 'apikey=' + '98e3fb1f',\n        query: '&t=',\n        movieTitle: '',\n        searchURL: '',\n        movie: ''\n      }\n      this.handleSubmit = this.handleSubmit.bind(this)\n      this.handleChange = this.handleChange.bind(this)\n    }\n    handleChange (event) {\n      this.setState({ [event.target.id]: event.target.value })\n    }\n    handleSubmit (event) {\n      event.preventDefault()\n      this.setState({\n        searchURL: this.state.baseURL + this.state.apikey + this.state.query + this.state.movieTitle\n      }, async () => {\n        try {\n          const response = await fetch(this.state.searchURL);\n          const result = await response.json(); // .json also returns promise, need to await\n          this.setState({movie: result}) // set movie state as the result object\n        } catch(err) {\n          console.log(err);\n        }\n      })\n      //   fetch(this.state.searchURL)\n      //     .then(response => {\n      //       return response.json()\n      //     }).then(json => this.setState({\n      //       movie: json,\n      //       movieTitle: ''\n      //     }),\n      //     err => console.log(err))\n      // })\n    }\n    render () {\n      return (\n        <React.Fragment>\n          <form onSubmit={this.handleSubmit}>\n            <label for='movieTitle'>Title</label>\n            <input\n              id='movieTitle'\n              type='text'\n              value={this.state.movieTitle}\n              onChange={this.handleChange}\n            />\n            <input\n              type='submit'\n              value='Find Movie Info'\n            />\n          </form>\n          {(this.state.movie)\n            ? <MovieInfo movie={this.state.movie} />\n            : ''\n          }\n        </React.Fragment>\n      )\n    }\n  }\n\nexport default OMDBQueryForm\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport OMDBQueryForm from './OMDBQueryForm';\n\nfunction App() {\n  return (\n    \n    <div className=\"App\">\n      <header className=\"App-header\">\n        <OMDBQueryForm />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}